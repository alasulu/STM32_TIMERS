
timer_udemy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000019c  08000150  08000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002f4  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  000012f4  2**0
                  CONTENTS
  4 .ARM          00000000  080002ec  080002ec  000012f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ec  080002f4  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000012ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002f0  080002f0  000012f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002f4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000054b  00000000  00000000  0000131d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000017d  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000019e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001817b  00000000  00000000  00001a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b07  00000000  00000000  00019c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000807a2  00000000  00000000  0001a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009aeb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000088  00000000  00000000  0009aef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0009af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	@ (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	080002d4 	.word	0x080002d4

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	@ (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	080002d4 	.word	0x080002d4

08000190 <main>:
#define GPIOAEN 	(0x1 << 2)
#define UIF_EN		(0x1 << 0)
#define LED5		(0x1 << 5)

int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	// Enable Clock Access to GPIOA
	RCC->APB2ENR |= GPIOAEN;
 8000194:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <main+0x5c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a14      	ldr	r2, [pc, #80]	@ (80001ec <main+0x5c>)
 800019a:	f043 0304 	orr.w	r3, r3, #4
 800019e:	6193      	str	r3, [r2, #24]

	// Set PA5 as output pin
	GPIOA->CRL &= ~(0xF<<20);
 80001a0:	4b13      	ldr	r3, [pc, #76]	@ (80001f0 <main+0x60>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a12      	ldr	r2, [pc, #72]	@ (80001f0 <main+0x60>)
 80001a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001aa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x1<<20); /* 01: Output mode, max speed 10 MHz with 00:
 80001ac:	4b10      	ldr	r3, [pc, #64]	@ (80001f0 <main+0x60>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a0f      	ldr	r2, [pc, #60]	@ (80001f0 <main+0x60>)
 80001b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001b6:	6013      	str	r3, [r2, #0]
	General purpose output push-pull */

	tim2_1hz_init();
 80001b8:	f000 f81c 	bl	80001f4 <tim2_1hz_init>

	while(1)
		{
		/* Wait for UIF */
		while(!(TIM2->SR & UIF_EN)) {} // We want to wait for the UIF flag is to be set
 80001bc:	bf00      	nop
 80001be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001c2:	691b      	ldr	r3, [r3, #16]
 80001c4:	f003 0301 	and.w	r3, r3, #1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d0f8      	beq.n	80001be <main+0x2e>
		order for us to know the time as occured. In the timer 2, we wait for a particular
		flag to be set to indicate the time out has occured. This is known as UIF or Update
		Interrupt Flag, this is located in Timer Status Register. */

		/* Clear UIF */
		TIM2->SR &= ~(UIF_EN);
 80001cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001d0:	691b      	ldr	r3, [r3, #16]
 80001d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001d6:	f023 0301 	bic.w	r3, r3, #1
 80001da:	6113      	str	r3, [r2, #16]

		/* Toggle the LED */
		GPIOA->ODR ^= LED5;
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <main+0x60>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a03      	ldr	r2, [pc, #12]	@ (80001f0 <main+0x60>)
 80001e2:	f083 0320 	eor.w	r3, r3, #32
 80001e6:	60d3      	str	r3, [r2, #12]
		while(!(TIM2->SR & UIF_EN)) {} // We want to wait for the UIF flag is to be set
 80001e8:	e7e8      	b.n	80001bc <main+0x2c>
 80001ea:	bf00      	nop
 80001ec:	40021000 	.word	0x40021000
 80001f0:	40010800 	.word	0x40010800

080001f4 <tim2_1hz_init>:
#define TIM2EN 		(0x1 << 0)
#define CR1_CEN		(0x1 << 0)
#define UIE			(0x1 << 0)

void tim2_1hz_init(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	/* Enable Clock Access to Timer 2 */
	RCC->APB1ENR |= TIM2EN;	// TIM2 is connected to APB1 BUS
 80001f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000230 <tim2_1hz_init+0x3c>)
 80001fa:	69db      	ldr	r3, [r3, #28]
 80001fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000230 <tim2_1hz_init+0x3c>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	61d3      	str	r3, [r2, #28]
	/* Set Prescaler Value */
	TIM2->PSC = (72000); // 36 000 000 (APB1 BUS Clock) / 36 000 = 1 000
 8000204:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000208:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <tim2_1hz_init+0x40>)
 800020a:	629a      	str	r2, [r3, #40]	@ 0x28
	// We count from the bit zero, considering that "-1" is written.
	/* Set Auto-reload Value */
	TIM2->ARR = (2000-1); // 1 000 / 1 000 = 1 (Update Event)
 800020c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000210:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000214:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Clear Counter */
	TIM2->CNT = 0;
 8000216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800021a:	2200      	movs	r2, #0
 800021c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Enable Timer */
	TIM2->CR1 = CR1_CEN;
 800021e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
	}
 8000226:	bf00      	nop
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000
 8000234:	00011940 	.word	0x00011940

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	@ (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800023c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	@ (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	@ (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	@ (800027c <LoopForever+0xe>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	@ (8000284 <LoopForever+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ff91 	bl	8000190 <main>

0800026e <LoopForever>:

LoopForever:
  b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	2600      	movs	r6, #0
 8000290:	4d0c      	ldr	r5, [pc, #48]	@ (80002c4 <__libc_init_array+0x38>)
 8000292:	4c0d      	ldr	r4, [pc, #52]	@ (80002c8 <__libc_init_array+0x3c>)
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	10a4      	asrs	r4, r4, #2
 8000298:	42a6      	cmp	r6, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	f000 f81a 	bl	80002d4 <_init>
 80002a0:	2600      	movs	r6, #0
 80002a2:	4d0a      	ldr	r5, [pc, #40]	@ (80002cc <__libc_init_array+0x40>)
 80002a4:	4c0a      	ldr	r4, [pc, #40]	@ (80002d0 <__libc_init_array+0x44>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	42a6      	cmp	r6, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b4:	4798      	blx	r3
 80002b6:	3601      	adds	r6, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80002be:	4798      	blx	r3
 80002c0:	3601      	adds	r6, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
