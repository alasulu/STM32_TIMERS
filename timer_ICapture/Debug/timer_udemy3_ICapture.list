
timer_udemy3_ICapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000150  08000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000368  08000370  00001370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000368  08000368  00001370  2**0
                  CONTENTS
  4 .ARM          00000000  08000368  08000368  00001370  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000368  08000370  00001370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000368  08000368  00001368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800036c  0800036c  0000136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000370  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000370  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004de  00000000  00000000  00001399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000191  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018199  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b8f  00000000  00000000  00019c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080855  00000000  00000000  0001a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b049  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  0009b08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0009b154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	@ (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	08000350 	.word	0x08000350

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	@ (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	08000350 	.word	0x08000350

08000190 <main>:

int timestamp = 0;

/* Set up: Connect a jumper wire from PA0 (Output) to PA6 (Input) */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0

tim5_PA0_output_compare();
 8000194:	f000 f814 	bl	80001c0 <tim5_PA0_output_compare>
tim3_PA6_input_capture();
 8000198:	f000 f854 	bl	8000244 <tim3_PA6_input_capture>
We would have to check a bit in the timer status register bit number one. */

	while(1)
		{
		/* Wait until edge is capture */
		while(!(TIM3->SR & CC1G)){}
 800019c:	bf00      	nop
 800019e:	4b06      	ldr	r3, [pc, #24]	@ (80001b8 <main+0x28>)
 80001a0:	691b      	ldr	r3, [r3, #16]
 80001a2:	f003 0302 	and.w	r3, r3, #2
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d0f9      	beq.n	800019e <main+0xe>

		/* Read Captured Value */
		timestamp = (TIM3->CCR1);
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <main+0x28>)
 80001ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b02      	ldr	r3, [pc, #8]	@ (80001bc <main+0x2c>)
 80001b2:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & CC1G)){}
 80001b4:	e7f2      	b.n	800019c <main+0xc>
 80001b6:	bf00      	nop
 80001b8:	40000400 	.word	0x40000400
 80001bc:	2000001c 	.word	0x2000001c

080001c0 <tim5_PA0_output_compare>:
	/* Enable Timer */
	TIM2->CR1 = CR1_CEN;
	}

void tim5_PA0_output_compare(void)
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
	/* Enable Clock Access to GPIOA */
	RCC->APB2ENR |= GPIOAEN;
 80001c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000234 <tim5_PA0_output_compare+0x74>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000234 <tim5_PA0_output_compare+0x74>)
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	6193      	str	r3, [r2, #24]

	/* Set ALternate Function On for Board */
	RCC->APB2ENR |= AFIOEN;
 80001d0:	4b18      	ldr	r3, [pc, #96]	@ (8000234 <tim5_PA0_output_compare+0x74>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a17      	ldr	r2, [pc, #92]	@ (8000234 <tim5_PA0_output_compare+0x74>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	6193      	str	r3, [r2, #24]

	/* Configure PA0 to Output Alternate Function */
	GPIOA->CRL &= ~(0xF<<0);
 80001dc:	4b16      	ldr	r3, [pc, #88]	@ (8000238 <tim5_PA0_output_compare+0x78>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a15      	ldr	r2, [pc, #84]	@ (8000238 <tim5_PA0_output_compare+0x78>)
 80001e2:	f023 030f 	bic.w	r3, r3, #15
 80001e6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x9<<0); /* 01: Output mode, max speed 10 MHz with
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <tim5_PA0_output_compare+0x78>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <tim5_PA0_output_compare+0x78>)
 80001ee:	f043 0309 	orr.w	r3, r3, #9
 80001f2:	6013      	str	r3, [r2, #0]
	10: Alternate function output Push-pull */

	/* Enable Clock Access to Timer 5 */
	RCC->APB1ENR |= TIM5EN;	// TIM5 is connected to APB1 BUS
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <tim5_PA0_output_compare+0x74>)
 80001f6:	69db      	ldr	r3, [r3, #28]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <tim5_PA0_output_compare+0x74>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	61d3      	str	r3, [r2, #28]

	/* Set Prescaler Value */
	TIM5->PSC = (72000-1); // 36 000 000 (APB1 BUS Clock) / 36 000 = 1 000
 8000200:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <tim5_PA0_output_compare+0x7c>)
 8000202:	4a0f      	ldr	r2, [pc, #60]	@ (8000240 <tim5_PA0_output_compare+0x80>)
 8000204:	629a      	str	r2, [r3, #40]	@ 0x28
	// We count from the bit zero, considering that "-1" is written.

	/* Set Auto-reload Value */
	TIM5->ARR = (2000-1); // 1 000 / 1 000 = 1 (Update Event)
 8000206:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <tim5_PA0_output_compare+0x7c>)
 8000208:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800020c:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Set Output Compare Toggle Mode */
	TIM5->CCMR1 = TOGGLE_OC;
 800020e:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <tim5_PA0_output_compare+0x7c>)
 8000210:	2230      	movs	r2, #48	@ 0x30
 8000212:	619a      	str	r2, [r3, #24]
	// We will use the Channel 1 of TIMER 5, so we consider OC1M. If we use Channel 2,
	//OC2M will be considered.
	// 011: Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.

	/* Enable Timer 5 Channel 1 in Compare Mode */
	TIM5->CCER |= CC1E;
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <tim5_PA0_output_compare+0x7c>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a08      	ldr	r2, [pc, #32]	@ (800023c <tim5_PA0_output_compare+0x7c>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6213      	str	r3, [r2, #32]

	/* Clear Counter */
	TIM5->CNT = 0;
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <tim5_PA0_output_compare+0x7c>)
 8000222:	2200      	movs	r2, #0
 8000224:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Enable Timer */
	TIM5->CR1 = CR1_CEN;
 8000226:	4b05      	ldr	r3, [pc, #20]	@ (800023c <tim5_PA0_output_compare+0x7c>)
 8000228:	2201      	movs	r2, #1
 800022a:	601a      	str	r2, [r3, #0]
	}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	40021000 	.word	0x40021000
 8000238:	40010800 	.word	0x40010800
 800023c:	40000c00 	.word	0x40000c00
 8000240:	0001193f 	.word	0x0001193f

08000244 <tim3_PA6_input_capture>:

void tim3_PA6_input_capture(void) //We will try to capture PA0 using our TIM3
/* TIM3 capture implies you have a timer pin, or you have a timer that connected to
an input pin. We want to find out which pin we want to connect this sensor, what we want
capture from. */
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	/* Enable Clock Access to GPIOA */
	RCC->APB2ENR |= GPIOAEN;
 8000248:	4b17      	ldr	r3, [pc, #92]	@ (80002a8 <tim3_PA6_input_capture+0x64>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a16      	ldr	r2, [pc, #88]	@ (80002a8 <tim3_PA6_input_capture+0x64>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6193      	str	r3, [r2, #24]

	/* Set ALternate Function On for Board */
	RCC->APB2ENR |= AFIOEN;
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <tim3_PA6_input_capture+0x64>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a13      	ldr	r2, [pc, #76]	@ (80002a8 <tim3_PA6_input_capture+0x64>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6193      	str	r3, [r2, #24]

	/* Configure PA6 to Output Alternate Function */
	GPIOA->CRL &= ~(0xF<<24);
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <tim3_PA6_input_capture+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a11      	ldr	r2, [pc, #68]	@ (80002ac <tim3_PA6_input_capture+0x68>)
 8000266:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800026a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x9<<24); /* 01: Output mode, max speed 10 MHz with
 800026c:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <tim3_PA6_input_capture+0x68>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <tim3_PA6_input_capture+0x68>)
 8000272:	f043 6310 	orr.w	r3, r3, #150994944	@ 0x9000000
 8000276:	6013      	str	r3, [r2, #0]
	10: Alternate function output Push-pull */

	/* Enable Clock Access to Timer 3 */
	RCC->APB1ENR |= TIM3EN;	// TIM3 is connected to APB1 BUS
 8000278:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <tim3_PA6_input_capture+0x64>)
 800027a:	69db      	ldr	r3, [r3, #28]
 800027c:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <tim3_PA6_input_capture+0x64>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	61d3      	str	r3, [r2, #28]

	/* Set Prescaler Value */
	TIM3->PSC = (48000-1); // 36 000 000 (APB1 BUS Clock) / 36 000 = 1 000
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <tim3_PA6_input_capture+0x6c>)
 8000286:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800028a:	629a      	str	r2, [r3, #40]	@ 0x28
	// We count from the bit zero, considering that "-1" is written.

	/* Set CH1 to input capture mode at every edge */
	TIM3->CCMR1 = CC1S;
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <tim3_PA6_input_capture+0x6c>)
 800028e:	2201      	movs	r2, #1
 8000290:	619a      	str	r2, [r3, #24]

	/* Set CH1 to capture at rising edge */
	TIM3->CCER = CC1E_CEN;
 8000292:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <tim3_PA6_input_capture+0x6c>)
 8000294:	2201      	movs	r2, #1
 8000296:	621a      	str	r2, [r3, #32]

	/* Enable Timer */
	TIM3->CR1 = CR1_CEN;
 8000298:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <tim3_PA6_input_capture+0x6c>)
 800029a:	2201      	movs	r2, #1
 800029c:	601a      	str	r2, [r3, #0]
	}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40000400 	.word	0x40000400

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	@ (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480c      	ldr	r0, [pc, #48]	@ (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490d      	ldr	r1, [pc, #52]	@ (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0a      	ldr	r2, [pc, #40]	@ (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 f811 	bl	8000308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e6:	f7ff ff53 	bl	8000190 <main>

080002ea <LoopForever>:

LoopForever:
  b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f8:	08000370 	.word	0x08000370
  ldr r2, =_sbss
 80002fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000300:	20000020 	.word	0x20000020

08000304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <__libc_init_array>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	2600      	movs	r6, #0
 800030c:	4d0c      	ldr	r5, [pc, #48]	@ (8000340 <__libc_init_array+0x38>)
 800030e:	4c0d      	ldr	r4, [pc, #52]	@ (8000344 <__libc_init_array+0x3c>)
 8000310:	1b64      	subs	r4, r4, r5
 8000312:	10a4      	asrs	r4, r4, #2
 8000314:	42a6      	cmp	r6, r4
 8000316:	d109      	bne.n	800032c <__libc_init_array+0x24>
 8000318:	f000 f81a 	bl	8000350 <_init>
 800031c:	2600      	movs	r6, #0
 800031e:	4d0a      	ldr	r5, [pc, #40]	@ (8000348 <__libc_init_array+0x40>)
 8000320:	4c0a      	ldr	r4, [pc, #40]	@ (800034c <__libc_init_array+0x44>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	42a6      	cmp	r6, r4
 8000328:	d105      	bne.n	8000336 <__libc_init_array+0x2e>
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000330:	4798      	blx	r3
 8000332:	3601      	adds	r6, #1
 8000334:	e7ee      	b.n	8000314 <__libc_init_array+0xc>
 8000336:	f855 3b04 	ldr.w	r3, [r5], #4
 800033a:	4798      	blx	r3
 800033c:	3601      	adds	r6, #1
 800033e:	e7f2      	b.n	8000326 <__libc_init_array+0x1e>
 8000340:	08000368 	.word	0x08000368
 8000344:	08000368 	.word	0x08000368
 8000348:	08000368 	.word	0x08000368
 800034c:	0800036c 	.word	0x0800036c

08000350 <_init>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr

0800035c <_fini>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr
