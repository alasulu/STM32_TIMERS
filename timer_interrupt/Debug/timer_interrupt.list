
timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000150  08000150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000334  0800033c  0000133c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000334  08000334  0000133c  2**0
                  CONTENTS
  4 .ARM          00000000  08000334  08000334  0000133c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000334  0800033c  0000133c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000334  08000334  00001334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000338  08000338  00001338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000133c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800033c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800033c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008e5  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000025e  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000057  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001817b  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b83  00000000  00000000  0001a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080bad  00000000  00000000  0001ac85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000108  00000000  00000000  0009b878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0009b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	@ (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	@ (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	0800031c 	.word	0x0800031c

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	@ (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	0800031c 	.word	0x0800031c

08000190 <main>:

static void tim2_callback(void);
void TIM2_IRQHandler(void);

int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	// Enable Clock Access to GPIOA
	RCC->APB2ENR |= GPIOAEN;
 8000194:	4b0b      	ldr	r3, [pc, #44]	@ (80001c4 <main+0x34>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	4a0a      	ldr	r2, [pc, #40]	@ (80001c4 <main+0x34>)
 800019a:	f043 0304 	orr.w	r3, r3, #4
 800019e:	6193      	str	r3, [r2, #24]

	// Set PA5 as output pin
	GPIOA->CRL &= ~(0xF<<20);
 80001a0:	4b09      	ldr	r3, [pc, #36]	@ (80001c8 <main+0x38>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a08      	ldr	r2, [pc, #32]	@ (80001c8 <main+0x38>)
 80001a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001aa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (0x1<<20); /* 01: Output mode, max speed 10 MHz with 00:
 80001ac:	4b06      	ldr	r3, [pc, #24]	@ (80001c8 <main+0x38>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a05      	ldr	r2, [pc, #20]	@ (80001c8 <main+0x38>)
 80001b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001b6:	6013      	str	r3, [r2, #0]
	General purpose output push-pull */

	tim2_1hz_interrupt_init();
 80001b8:	f000 f83c 	bl	8000234 <tim2_1hz_interrupt_init>
	TIM2_IRQHandler();
 80001bc:	f000 f814 	bl	80001e8 <TIM2_IRQHandler>

	while(1)
 80001c0:	bf00      	nop
 80001c2:	e7fd      	b.n	80001c0 <main+0x30>
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40010800 	.word	0x40010800

080001cc <tim2_callback>:

		}
}

static void tim2_callback(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	/* Toggle the LED */
	GPIOA->ODR ^= LED5;// We are dealing with interrupts, no need to wait for the flags
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <tim2_callback+0x18>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	4a03      	ldr	r2, [pc, #12]	@ (80001e4 <tim2_callback+0x18>)
 80001d6:	f083 0320 	eor.w	r3, r3, #32
 80001da:	60d3      	str	r3, [r2, #12]
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	40010800 	.word	0x40010800

080001e8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	/* Clear Update Interrupt Flag */
	TIM2->SR &= ~UIF_EN;  // We update in DMA/Interrupt Enable Register, but we
 80001ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001f0:	691b      	ldr	r3, [r3, #16]
 80001f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001f6:	f023 0301 	bic.w	r3, r3, #1
 80001fa:	6113      	str	r3, [r2, #16]
	//clear it in status register

	/* Do something */
	tim2_callback();
 80001fc:	f7ff ffe6 	bl	80001cc <tim2_callback>

}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}

08000204 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	f003 021f 	and.w	r2, r3, #31
 8000214:	4906      	ldr	r1, [pc, #24]	@ (8000230 <NVIC_EnableIRQ+0x2c>)
 8000216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021a:	095b      	lsrs	r3, r3, #5
 800021c:	2001      	movs	r0, #1
 800021e:	fa00 f202 	lsl.w	r2, r0, r2
 8000222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	e000e100 	.word	0xe000e100

08000234 <tim2_1hz_interrupt_init>:
	/* Enable Timer */
	TIM2->CR1 = CR1_CEN;
	}

void tim2_1hz_interrupt_init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	/* Enable Clock Access to Timer 2 */
	RCC->APB1ENR |= TIM2EN;	// TIM2 is connected to APB1 BUS
 8000238:	4b10      	ldr	r3, [pc, #64]	@ (800027c <tim2_1hz_interrupt_init+0x48>)
 800023a:	69db      	ldr	r3, [r3, #28]
 800023c:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <tim2_1hz_interrupt_init+0x48>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	61d3      	str	r3, [r2, #28]

	/* Set Prescaler Value */
	TIM2->PSC = (36000-1); // 36 000 000 (APB1 BUS Clock) / 36 000 = 1 000
 8000244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000248:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800024c:	629a      	str	r2, [r3, #40]	@ 0x28

	// We count from the bit zero, considering that "-1" is written.
	/* Set Auto-reload Value */
	TIM2->ARR = (1000-1); // 1 000 / 1 000 = 1 (Update Event)
 800024e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000252:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000256:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Clear Counter */
	TIM2->CNT = 0;
 8000258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Enable Timer */
	TIM2->CR1 = CR1_CEN;
 8000260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000264:	2201      	movs	r2, #1
 8000266:	601a      	str	r2, [r3, #0]

	/* Enable TIM Interrupt */
    TIM2->DIER = UIE_EN;
 8000268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026c:	2201      	movs	r2, #1
 800026e:	60da      	str	r2, [r3, #12]

	/* Enable TIM Interrupt in NVIC */
    NVIC_EnableIRQ(TIM2_IRQn);
 8000270:	201c      	movs	r0, #28
 8000272:	f7ff ffc7 	bl	8000204 <NVIC_EnableIRQ>

	}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	@ (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	@ (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	@ (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	@ (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	@ (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	@ (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 f811 	bl	80002d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ff6d 	bl	8000190 <main>

080002b6 <LoopForever>:

LoopForever:
  b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	0800033c 	.word	0x0800033c
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>
	...

080002d4 <__libc_init_array>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	2600      	movs	r6, #0
 80002d8:	4d0c      	ldr	r5, [pc, #48]	@ (800030c <__libc_init_array+0x38>)
 80002da:	4c0d      	ldr	r4, [pc, #52]	@ (8000310 <__libc_init_array+0x3c>)
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	42a6      	cmp	r6, r4
 80002e2:	d109      	bne.n	80002f8 <__libc_init_array+0x24>
 80002e4:	f000 f81a 	bl	800031c <_init>
 80002e8:	2600      	movs	r6, #0
 80002ea:	4d0a      	ldr	r5, [pc, #40]	@ (8000314 <__libc_init_array+0x40>)
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <__libc_init_array+0x44>)
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	10a4      	asrs	r4, r4, #2
 80002f2:	42a6      	cmp	r6, r4
 80002f4:	d105      	bne.n	8000302 <__libc_init_array+0x2e>
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fc:	4798      	blx	r3
 80002fe:	3601      	adds	r6, #1
 8000300:	e7ee      	b.n	80002e0 <__libc_init_array+0xc>
 8000302:	f855 3b04 	ldr.w	r3, [r5], #4
 8000306:	4798      	blx	r3
 8000308:	3601      	adds	r6, #1
 800030a:	e7f2      	b.n	80002f2 <__libc_init_array+0x1e>
 800030c:	08000334 	.word	0x08000334
 8000310:	08000334 	.word	0x08000334
 8000314:	08000334 	.word	0x08000334
 8000318:	08000338 	.word	0x08000338

0800031c <_init>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

08000328 <_fini>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr
